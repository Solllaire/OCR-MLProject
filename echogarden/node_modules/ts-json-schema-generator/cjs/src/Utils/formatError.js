"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatError = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const DiagnosticError_js_1 = require("../Error/DiagnosticError.js");
const UnknownNodeError_js_1 = require("../Error/UnknownNodeError.js");
function getNodeLocation(node) {
    const sourceFile = node.getSourceFile();
    if (!sourceFile) {
        return ["<unknown file>", 0, 0];
    }
    const lineAndChar = typescript_1.default.getLineAndCharacterOfPosition(sourceFile, node.getStart(sourceFile));
    return [sourceFile.fileName, lineAndChar.line + 1, lineAndChar.character];
}
function formatError(error) {
    if (error instanceof DiagnosticError_js_1.DiagnosticError) {
        const rootDir = process.cwd().split(path.sep)[0] || "/";
        return typescript_1.default.formatDiagnostics(error.getDiagnostics(), {
            getCanonicalFileName: (fileName) => fileName,
            getCurrentDirectory: () => rootDir,
            getNewLine: () => "\n",
        });
    }
    else if (error instanceof UnknownNodeError_js_1.UnknownNodeError) {
        const unknownNode = error.getReference() || error.getNode();
        const nodeFullText = unknownNode.getFullText().trim().split("\n")[0].trim();
        const [sourceFile, lineNumber, charPos] = getNodeLocation(unknownNode);
        return (`${error.name}: Unknown node "${nodeFullText}" (ts.SyntaxKind = ${error.getNode().kind}) ` +
            `at ${sourceFile}(${lineNumber},${charPos})\n`);
    }
    return `${error.name}: ${error.message}\n`;
}
exports.formatError = formatError;
//# sourceMappingURL=formatError.js.map