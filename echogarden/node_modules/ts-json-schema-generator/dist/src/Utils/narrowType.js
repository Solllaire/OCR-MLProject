import { EnumType } from "../Type/EnumType.js";
import { NeverType } from "../Type/NeverType.js";
import { UnionType } from "../Type/UnionType.js";
import { derefType } from "./derefType.js";
export function narrowType(type, predicate) {
    const derefed = derefType(type);
    if (derefed instanceof UnionType || derefed instanceof EnumType) {
        let changed = false;
        const types = [];
        for (const sub of derefed.getTypes()) {
            const derefedSub = derefType(sub);
            const narrowed = narrowType(derefedSub, predicate);
            if (!(narrowed instanceof NeverType)) {
                if (narrowed === derefedSub) {
                    types.push(sub);
                }
                else {
                    types.push(narrowed);
                    changed = true;
                }
            }
            else {
                changed = true;
            }
        }
        if (changed) {
            if (types.length === 0) {
                return new NeverType();
            }
            else if (types.length === 1) {
                return types[0];
            }
            else {
                return new UnionType(types);
            }
        }
        return type;
    }
    return predicate(derefed) ? type : new NeverType();
}
//# sourceMappingURL=narrowType.js.map