import json5 from "json5";
import { symbolAtNode } from "../Utils/symbolAtNode.js";
export class BasicAnnotationsReader {
    extraTags;
    static requiresDollar = new Set(["id", "comment", "ref"]);
    static textTags = new Set([
        "title",
        "description",
        "id",
        "format",
        "pattern",
        "ref",
        "comment",
        "contentMediaType",
        "contentEncoding",
        "discriminator",
    ]);
    static jsonTags = new Set([
        "minimum",
        "exclusiveMinimum",
        "maximum",
        "exclusiveMaximum",
        "multipleOf",
        "minLength",
        "maxLength",
        "minProperties",
        "maxProperties",
        "minItems",
        "maxItems",
        "uniqueItems",
        "propertyNames",
        "contains",
        "const",
        "examples",
        "default",
        "required",
        "if",
        "then",
        "else",
        "readOnly",
        "writeOnly",
        "deprecated",
    ]);
    constructor(extraTags) {
        this.extraTags = extraTags;
    }
    getAnnotations(node) {
        const symbol = symbolAtNode(node);
        if (!symbol) {
            return undefined;
        }
        const jsDocTags = symbol.getJsDocTags();
        if (!jsDocTags || !jsDocTags.length) {
            return undefined;
        }
        const annotations = jsDocTags.reduce((result, jsDocTag) => {
            const value = this.parseJsDocTag(jsDocTag);
            if (value !== undefined) {
                if (BasicAnnotationsReader.requiresDollar.has(jsDocTag.name)) {
                    result["$" + jsDocTag.name] = value;
                }
                else {
                    result[jsDocTag.name] = value;
                }
            }
            return result;
        }, {});
        return Object.keys(annotations).length ? annotations : undefined;
    }
    parseJsDocTag(jsDocTag) {
        const isTextTag = BasicAnnotationsReader.textTags.has(jsDocTag.name);
        const defaultText = isTextTag ? "" : "true";
        const text = jsDocTag.text?.map((part) => part.text).join("") || defaultText;
        if (isTextTag) {
            return text;
        }
        let parsed = this.parseJson(text);
        parsed = parsed === undefined ? text : parsed;
        if (BasicAnnotationsReader.jsonTags.has(jsDocTag.name)) {
            return parsed;
        }
        else if (this.extraTags?.has(jsDocTag.name)) {
            return parsed;
        }
        else {
            return undefined;
        }
    }
    parseJson(value) {
        try {
            return json5.parse(value);
        }
        catch (e) {
            return undefined;
        }
    }
}
//# sourceMappingURL=BasicAnnotationsReader.js.map