import { derefType } from "../Utils/derefType.js";
import { BaseType } from "./BaseType.js";
import { RestType } from "./RestType.js";
function normalize(types) {
    let normalized = [];
    for (const type of types) {
        if (type instanceof RestType) {
            const inner_type = derefType(type.getType());
            normalized = [
                ...normalized,
                ...(inner_type instanceof TupleType ? normalize(inner_type.getTypes()) : [type]),
            ];
        }
        else {
            normalized.push(type);
        }
    }
    return normalized;
}
export class TupleType extends BaseType {
    types;
    constructor(types) {
        super();
        this.types = normalize(types);
    }
    getId() {
        return `[${this.types.map((item) => item?.getId() ?? "never").join(",")}]`;
    }
    getTypes() {
        return this.types;
    }
}
//# sourceMappingURL=TupleType.js.map