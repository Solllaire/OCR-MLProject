import { BaseType } from "./BaseType.js";
import { uniqueTypeArray } from "../Utils/uniqueTypeArray.js";
import { NeverType } from "./NeverType.js";
import { derefAliasedType, derefType, isHiddenType } from "../Utils/derefType.js";
export class UnionType extends BaseType {
    types;
    discriminator = undefined;
    constructor(types) {
        super();
        this.types = uniqueTypeArray(types.reduce((flatTypes, type) => {
            if (type instanceof UnionType) {
                flatTypes.push(...type.getTypes());
            }
            else if (!(type instanceof NeverType)) {
                flatTypes.push(type);
            }
            return flatTypes;
        }, []));
    }
    setDiscriminator(discriminator) {
        this.discriminator = discriminator;
    }
    getDiscriminator() {
        return this.discriminator;
    }
    getId() {
        return `(${this.types.map((type) => type.getId()).join("|")})`;
    }
    getName() {
        return `(${this.types.map((type) => type.getName()).join("|")})`;
    }
    getTypes() {
        return this.types;
    }
    normalize() {
        if (this.types.length === 0) {
            return new NeverType();
        }
        else if (this.types.length === 1) {
            return this.types[0];
        }
        else {
            const union = new UnionType(this.types.filter((type) => !(derefType(type) instanceof NeverType)));
            if (union.getTypes().length > 1) {
                return union;
            }
            else {
                return union.normalize();
            }
        }
    }
    getFlattenedTypes(deref = derefAliasedType) {
        return this.getTypes()
            .filter((t) => !isHiddenType(t))
            .map(deref)
            .flatMap((t) => {
            if (t instanceof UnionType) {
                return t.getFlattenedTypes(deref);
            }
            return t;
        });
    }
}
//# sourceMappingURL=UnionType.js.map