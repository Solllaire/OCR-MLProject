import { ReferenceType } from "./Type/ReferenceType.js";
import { getKey } from "./Utils/nodeKey.js";
export class CircularReferenceNodeParser {
    childNodeParser;
    circular = new Map();
    constructor(childNodeParser) {
        this.childNodeParser = childNodeParser;
    }
    supportsNode(node) {
        return this.childNodeParser.supportsNode(node);
    }
    createType(node, context) {
        const key = getKey(node, context);
        if (this.circular.has(key)) {
            return this.circular.get(key);
        }
        const reference = new ReferenceType();
        this.circular.set(key, reference);
        const type = this.childNodeParser.createType(node, context, reference);
        if (type) {
            reference.setType(type);
        }
        this.circular.delete(key);
        return type;
    }
}
//# sourceMappingURL=CircularReferenceNodeParser.js.map