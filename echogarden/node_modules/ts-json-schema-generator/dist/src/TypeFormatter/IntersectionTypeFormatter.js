import { ArrayType } from "../Type/ArrayType.js";
import { IntersectionType } from "../Type/IntersectionType.js";
import { TupleType } from "../Type/TupleType.js";
import { getAllOfDefinitionReducer } from "../Utils/allOfDefinition.js";
import { uniqueArray } from "../Utils/uniqueArray.js";
export class IntersectionTypeFormatter {
    childTypeFormatter;
    constructor(childTypeFormatter) {
        this.childTypeFormatter = childTypeFormatter;
    }
    supportsType(type) {
        return type instanceof IntersectionType;
    }
    getDefinition(type) {
        const dependencies = [];
        const nonArrayLikeTypes = [];
        for (const t of type.getTypes()) {
            if (t instanceof ArrayType || t instanceof TupleType) {
                dependencies.push(this.childTypeFormatter.getDefinition(t));
            }
            else {
                nonArrayLikeTypes.push(t);
            }
        }
        if (nonArrayLikeTypes.length) {
            dependencies.push(nonArrayLikeTypes.reduce(getAllOfDefinitionReducer(this.childTypeFormatter), {
                type: "object",
                additionalProperties: false,
            }));
        }
        return dependencies.length === 1 ? dependencies[0] : { allOf: dependencies };
    }
    getChildren(type) {
        return uniqueArray(type
            .getTypes()
            .reduce((result, item) => [...result, ...this.childTypeFormatter.getChildren(item)], []));
    }
}
//# sourceMappingURL=IntersectionTypeFormatter.js.map