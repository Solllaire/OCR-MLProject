import { LogicError } from "../Error/LogicError.js";
import { BooleanType } from "../Type/BooleanType.js";
import { NullType } from "../Type/NullType.js";
import { NumberType } from "../Type/NumberType.js";
import { PrimitiveType } from "../Type/PrimitiveType.js";
import { StringType } from "../Type/StringType.js";
import { UnionType } from "../Type/UnionType.js";
import { uniqueArray } from "../Utils/uniqueArray.js";
export class PrimitiveUnionTypeFormatter {
    supportsType(type) {
        return type instanceof UnionType && type.getTypes().length > 0 && this.isPrimitiveUnion(type);
    }
    getDefinition(type) {
        return {
            type: uniqueArray(type.getTypes().map((item) => this.getPrimitiveType(item))),
        };
    }
    getChildren(type) {
        return [];
    }
    isPrimitiveUnion(type) {
        return type.getTypes().every((item) => item instanceof PrimitiveType);
    }
    getPrimitiveType(item) {
        if (item instanceof StringType) {
            return "string";
        }
        else if (item instanceof NumberType) {
            return "number";
        }
        else if (item instanceof BooleanType) {
            return "boolean";
        }
        else if (item instanceof NullType) {
            return "null";
        }
        throw new LogicError("Unexpected code branch");
    }
}
//# sourceMappingURL=PrimitiveUnionTypeFormatter.js.map