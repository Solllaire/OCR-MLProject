import ts from "typescript";
import { FunctionType } from "../Type/FunctionType.js";
import { NeverType } from "../Type/NeverType.js";
import { DefinitionType } from "../Type/DefinitionType.js";
import { ObjectProperty, ObjectType } from "../Type/ObjectType.js";
import { getKey } from "../Utils/nodeKey.js";
export class FunctionNodeParser {
    childNodeParser;
    functions;
    constructor(childNodeParser, functions) {
        this.childNodeParser = childNodeParser;
        this.functions = functions;
    }
    supportsNode(node) {
        return (node.kind === ts.SyntaxKind.FunctionType ||
            node.kind === ts.SyntaxKind.FunctionExpression ||
            node.kind === ts.SyntaxKind.ArrowFunction ||
            node.kind === ts.SyntaxKind.FunctionDeclaration);
    }
    createType(node, context) {
        if (this.functions === "hide") {
            return new NeverType();
        }
        const name = getTypeName(node);
        const func = new FunctionType(node, getNamedArguments(this.childNodeParser, node, context));
        return name ? new DefinitionType(name, func) : func;
    }
}
export function getNamedArguments(childNodeParser, node, context) {
    if (node.parameters.length === 0) {
        return undefined;
    }
    const parameterTypes = node.parameters.map((parameter) => {
        return childNodeParser.createType(parameter, context);
    });
    return new ObjectType(`object-${getKey(node, context)}`, [], parameterTypes.map((parameterType, index) => {
        const required = node.parameters[index].questionToken ? false : !node.parameters[index].initializer;
        return new ObjectProperty(node.parameters[index].name.getText(), parameterType, required);
    }), false);
}
export function getTypeName(node) {
    if (ts.isArrowFunction(node) || ts.isFunctionExpression(node) || ts.isFunctionTypeNode(node)) {
        const parent = node.parent;
        if (ts.isVariableDeclaration(parent)) {
            return parent.name.getText();
        }
    }
    if (ts.isFunctionDeclaration(node)) {
        return node.name?.getText();
    }
    return undefined;
}
//# sourceMappingURL=FunctionNodeParser.js.map