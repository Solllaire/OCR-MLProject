import ts from "typescript";
import { LogicError } from "../Error/LogicError.js";
import { Context } from "../NodeParser.js";
import { AnnotatedType } from "../Type/AnnotatedType.js";
import { ArrayType } from "../Type/ArrayType.js";
import { DefinitionType } from "../Type/DefinitionType.js";
import { EnumType } from "../Type/EnumType.js";
import { LiteralType } from "../Type/LiteralType.js";
import { NeverType } from "../Type/NeverType.js";
import { NumberType } from "../Type/NumberType.js";
import { ObjectProperty, ObjectType } from "../Type/ObjectType.js";
import { StringType } from "../Type/StringType.js";
import { SymbolType } from "../Type/SymbolType.js";
import { UnionType } from "../Type/UnionType.js";
import { derefAnnotatedType, derefType } from "../Utils/derefType.js";
import { getKey } from "../Utils/nodeKey.js";
import { preserveAnnotation } from "../Utils/preserveAnnotation.js";
import { removeUndefined } from "../Utils/removeUndefined.js";
import { uniqueTypeArray } from "../Utils/uniqueTypeArray.js";
export class MappedTypeNodeParser {
    childNodeParser;
    additionalProperties;
    constructor(childNodeParser, additionalProperties) {
        this.childNodeParser = childNodeParser;
        this.additionalProperties = additionalProperties;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.MappedType;
    }
    createType(node, context) {
        const constraintType = this.childNodeParser.createType(node.typeParameter.constraint, context);
        const keyListType = derefType(constraintType);
        const id = `indexed-type-${getKey(node, context)}`;
        if (keyListType instanceof UnionType) {
            return new ObjectType(id, [], this.getProperties(node, keyListType, context), this.getAdditionalProperties(node, keyListType, context));
        }
        else if (keyListType instanceof LiteralType) {
            return new ObjectType(id, [], this.getProperties(node, new UnionType([keyListType]), context), false);
        }
        else if (keyListType instanceof StringType ||
            keyListType instanceof NumberType ||
            keyListType instanceof SymbolType) {
            if (constraintType?.getId() === "number") {
                const type = this.childNodeParser.createType(node.type, this.createSubContext(node, keyListType, context));
                return type instanceof NeverType ? new NeverType() : new ArrayType(type);
            }
            const type = this.childNodeParser.createType(node.type, context);
            const resultType = new ObjectType(id, [], [], type);
            if (resultType) {
                let annotations;
                if (constraintType instanceof AnnotatedType) {
                    annotations = constraintType.getAnnotations();
                }
                else if (constraintType instanceof DefinitionType) {
                    const childType = constraintType.getType();
                    if (childType instanceof AnnotatedType) {
                        annotations = childType.getAnnotations();
                    }
                }
                if (annotations) {
                    return new AnnotatedType(resultType, { propertyNames: annotations }, false);
                }
            }
            return resultType;
        }
        else if (keyListType instanceof EnumType) {
            return new ObjectType(id, [], this.getValues(node, keyListType, context), false);
        }
        else if (keyListType instanceof NeverType) {
            return new ObjectType(id, [], [], false);
        }
        else {
            throw new LogicError(`Unexpected key type "${constraintType ? constraintType.getId() : constraintType}" for type "${node.getText()}" (expected "UnionType" or "StringType")`);
        }
    }
    mapKey(node, rawKey, context) {
        if (!node.nameType) {
            return rawKey;
        }
        return derefType(this.childNodeParser.createType(node.nameType, this.createSubContext(node, rawKey, context)));
    }
    getProperties(node, keyListType, context) {
        return uniqueTypeArray(keyListType.getFlattenedTypes(derefType))
            .filter((type) => type instanceof LiteralType)
            .map((type) => [type, this.mapKey(node, type, context)])
            .filter((value) => value[1] instanceof LiteralType)
            .reduce((result, [key, mappedKey]) => {
            const propertyType = this.childNodeParser.createType(node.type, this.createSubContext(node, key, context));
            let newType = derefAnnotatedType(propertyType);
            let hasUndefined = false;
            if (newType instanceof UnionType) {
                const { newType: newType_, numRemoved } = removeUndefined(newType);
                hasUndefined = numRemoved > 0;
                newType = newType_;
            }
            const objectProperty = new ObjectProperty(mappedKey.getValue().toString(), preserveAnnotation(propertyType, newType), !node.questionToken && !hasUndefined);
            result.push(objectProperty);
            return result;
        }, []);
    }
    getValues(node, keyListType, context) {
        return keyListType
            .getValues()
            .filter((value) => value != null)
            .map((value) => {
            const type = this.childNodeParser.createType(node.type, this.createSubContext(node, new LiteralType(value), context));
            return new ObjectProperty(value.toString(), type, !node.questionToken);
        });
    }
    getAdditionalProperties(node, keyListType, context) {
        const key = keyListType.getTypes().filter((type) => !(type instanceof LiteralType))[0];
        if (key) {
            return (this.childNodeParser.createType(node.type, this.createSubContext(node, key, context)) ??
                this.additionalProperties);
        }
        else {
            return this.additionalProperties;
        }
    }
    createSubContext(node, key, parentContext) {
        const subContext = new Context(node);
        parentContext.getParameters().forEach((parentParameter) => {
            subContext.pushParameter(parentParameter);
            subContext.pushArgument(parentContext.getArgument(parentParameter));
        });
        subContext.pushParameter(node.typeParameter.name.text);
        subContext.pushArgument(key);
        return subContext;
    }
}
//# sourceMappingURL=MappedTypeNodeParser.js.map