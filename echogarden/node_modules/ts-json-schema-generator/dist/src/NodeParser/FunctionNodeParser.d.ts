/// <reference types="ts-expose-internals/typescript.js" />
import ts from "typescript";
import { SubNodeParser } from "../SubNodeParser.js";
import { BaseType } from "../Type/BaseType.js";
import { FunctionOptions } from "../Config.js";
import { Context, NodeParser } from "../NodeParser.js";
import { ObjectType } from "../Type/ObjectType.js";
export declare class FunctionNodeParser implements SubNodeParser {
    protected childNodeParser: NodeParser;
    protected functions: FunctionOptions;
    constructor(childNodeParser: NodeParser, functions: FunctionOptions);
    supportsNode(node: ts.TypeNode): boolean;
    createType(node: ts.FunctionTypeNode | ts.FunctionExpression | ts.FunctionDeclaration | ts.ArrowFunction, context: Context): BaseType;
}
export declare function getNamedArguments(childNodeParser: NodeParser, node: ts.FunctionTypeNode | ts.FunctionExpression | ts.FunctionDeclaration | ts.ArrowFunction | ts.ConstructorTypeNode, context: Context): ObjectType | undefined;
export declare function getTypeName(node: ts.FunctionTypeNode | ts.FunctionExpression | ts.FunctionDeclaration | ts.ArrowFunction | ts.ConstructorTypeNode): string | undefined;
