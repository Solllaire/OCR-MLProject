import ts from "typescript";
import { UnionType } from "../Type/UnionType.js";
import { notNever } from "../Utils/notNever.js";
import { NeverType } from "../Type/NeverType.js";
export class UnionNodeParser {
    typeChecker;
    childNodeParser;
    constructor(typeChecker, childNodeParser) {
        this.typeChecker = typeChecker;
        this.childNodeParser = childNodeParser;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.UnionType;
    }
    createType(node, context) {
        const types = node.types
            .map((subnode) => {
            return this.childNodeParser.createType(subnode, context);
        })
            .filter(notNever);
        if (types.length === 1) {
            return types[0];
        }
        else if (types.length === 0) {
            return new NeverType();
        }
        return new UnionType(types);
    }
}
//# sourceMappingURL=UnionNodeParser.js.map