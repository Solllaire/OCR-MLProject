import ts from "typescript";
import { AliasType } from "../Type/AliasType.js";
import { NeverType } from "../Type/NeverType.js";
import { getKey } from "../Utils/nodeKey.js";
export class TypeAliasNodeParser {
    typeChecker;
    childNodeParser;
    constructor(typeChecker, childNodeParser) {
        this.typeChecker = typeChecker;
        this.childNodeParser = childNodeParser;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.TypeAliasDeclaration;
    }
    createType(node, context, reference) {
        if (node.typeParameters?.length) {
            for (const typeParam of node.typeParameters) {
                const nameSymbol = this.typeChecker.getSymbolAtLocation(typeParam.name);
                context.pushParameter(nameSymbol.name);
                if (typeParam.default) {
                    const type = this.childNodeParser.createType(typeParam.default, context);
                    context.setDefault(nameSymbol.name, type);
                }
            }
        }
        const id = this.getTypeId(node, context);
        const name = this.getTypeName(node, context);
        if (reference) {
            reference.setId(id);
            reference.setName(name);
        }
        const type = this.childNodeParser.createType(node.type, context);
        if (type instanceof NeverType) {
            return new NeverType();
        }
        return new AliasType(id, type);
    }
    getTypeId(node, context) {
        return `alias-${getKey(node, context)}`;
    }
    getTypeName(node, context) {
        const argumentIds = context.getArguments().map((arg) => arg?.getName());
        const fullName = node.name.getText();
        return argumentIds.length ? `${fullName}<${argumentIds.join(",")}>` : fullName;
    }
}
//# sourceMappingURL=TypeAliasNodeParser.js.map