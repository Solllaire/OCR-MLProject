import ts from "typescript";
import { ExtendedAnnotationsReader } from "../AnnotationsReader/ExtendedAnnotationsReader.js";
import { AnnotatedType } from "../Type/AnnotatedType.js";
import { removeUndefined } from "../Utils/removeUndefined.js";
import { DefinitionType } from "../Type/DefinitionType.js";
import { UnionType } from "../Type/UnionType.js";
import { AnyType } from "../Type/AnyType.js";
export class AnnotatedNodeParser {
    childNodeParser;
    annotationsReader;
    constructor(childNodeParser, annotationsReader) {
        this.childNodeParser = childNodeParser;
        this.annotationsReader = annotationsReader;
    }
    supportsNode(node) {
        return this.childNodeParser.supportsNode(node);
    }
    createType(node, context, reference) {
        const annotatedNode = this.getAnnotatedNode(node);
        let annotations = this.annotationsReader.getAnnotations(annotatedNode);
        const nullable = this.getNullable(annotatedNode);
        if (annotations && "$ref" in annotations) {
            return new AnnotatedType(new AnyType(), annotations, nullable);
        }
        const baseType = this.childNodeParser.createType(node, context, reference);
        if (node.getSourceFile()?.fileName.match(/[/\\]typescript[/\\]lib[/\\]lib\.[^/\\]+\.d\.ts$/i)) {
            let specialCase = false;
            if (node.kind === ts.SyntaxKind.TypeAliasDeclaration &&
                node.name.text === "Exclude") {
                let t = context.getArgument("T");
                if (t instanceof UnionType) {
                    t = removeUndefined(t).newType;
                }
                if (t instanceof DefinitionType) {
                    t = t.getType();
                }
                if (t instanceof AnnotatedType) {
                    annotations = t.getAnnotations();
                    specialCase = true;
                }
            }
            if (!specialCase) {
                return baseType;
            }
        }
        return !annotations && !nullable ? baseType : new AnnotatedType(baseType, annotations || {}, nullable);
    }
    getNullable(annotatedNode) {
        return this.annotationsReader instanceof ExtendedAnnotationsReader
            ? this.annotationsReader.isNullable(annotatedNode)
            : false;
    }
    getAnnotatedNode(node) {
        if (!node.parent) {
            return node;
        }
        else if (node.parent.kind === ts.SyntaxKind.PropertySignature) {
            return node.parent;
        }
        else if (node.parent.kind === ts.SyntaxKind.PropertyDeclaration) {
            return node.parent;
        }
        else if (node.parent.kind === ts.SyntaxKind.IndexSignature) {
            return node.parent;
        }
        else if (node.parent.kind === ts.SyntaxKind.Parameter) {
            return node.parent;
        }
        else {
            return node;
        }
    }
}
//# sourceMappingURL=AnnotatedNodeParser.js.map