import ts from "typescript";
import { ConstructorType } from "../Type/ConstructorType.js";
import { NeverType } from "../Type/NeverType.js";
import { DefinitionType } from "../Type/DefinitionType.js";
import { getNamedArguments, getTypeName } from "./FunctionNodeParser.js";
export class ConstructorNodeParser {
    childNodeParser;
    functions;
    constructor(childNodeParser, functions) {
        this.childNodeParser = childNodeParser;
        this.functions = functions;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.ConstructorType;
    }
    createType(node, context) {
        if (this.functions === "hide") {
            return new NeverType();
        }
        const name = getTypeName(node);
        const func = new ConstructorType(node, getNamedArguments(this.childNodeParser, node, context));
        return name ? new DefinitionType(name, func) : func;
    }
}
//# sourceMappingURL=ConstructorNodeParser.js.map