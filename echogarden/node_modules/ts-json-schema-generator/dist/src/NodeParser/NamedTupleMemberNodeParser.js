import ts from "typescript";
import { AnnotatedType } from "../Type/AnnotatedType.js";
import { ArrayType } from "../Type/ArrayType.js";
import { RestType } from "../Type/RestType.js";
export class NamedTupleMemberNodeParser {
    childNodeParser;
    constructor(childNodeParser) {
        this.childNodeParser = childNodeParser;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.NamedTupleMember;
    }
    createType(node, context, reference) {
        const baseType = this.childNodeParser.createType(node.type, context, reference);
        if (baseType instanceof ArrayType && node.getChildAt(0).kind === ts.SyntaxKind.DotDotDotToken) {
            return new RestType(baseType, node.name.text);
        }
        return baseType && new AnnotatedType(baseType, { title: node.name.text }, false);
    }
}
//# sourceMappingURL=NamedTupleMemberNodeParser.js.map