import { TupleType } from "../Type/TupleType.js";
import ts from "typescript";
import { Context } from "../NodeParser.js";
import { UnionType } from "../Type/UnionType.js";
import { LiteralType } from "../Type/LiteralType.js";
import { SymbolType } from "../Type/SymbolType.js";
export class CallExpressionParser {
    typeChecker;
    childNodeParser;
    constructor(typeChecker, childNodeParser) {
        this.typeChecker = typeChecker;
        this.childNodeParser = childNodeParser;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.CallExpression;
    }
    createType(node, context) {
        const type = this.typeChecker.getTypeAtLocation(node);
        if (Array.isArray(type?.typeArguments?.[0]?.types)) {
            return new TupleType([
                new UnionType(type.typeArguments[0].types.map((t) => new LiteralType(t.value))),
            ]);
        }
        if (type.flags === ts.TypeFlags.UniqueESSymbol) {
            return new SymbolType();
        }
        const symbol = type.symbol || type.aliasSymbol;
        const decl = symbol.valueDeclaration || symbol.declarations[0];
        const subContext = this.createSubContext(node, context);
        return this.childNodeParser.createType(decl, subContext);
    }
    createSubContext(node, parentContext) {
        const subContext = new Context(node);
        for (const arg of node.arguments) {
            const type = this.childNodeParser.createType(arg, parentContext);
            subContext.pushArgument(type);
        }
        return subContext;
    }
}
//# sourceMappingURL=CallExpressionParser.js.map