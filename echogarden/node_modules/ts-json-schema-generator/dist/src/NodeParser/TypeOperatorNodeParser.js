import ts from "typescript";
import { ArrayType } from "../Type/ArrayType.js";
import { NumberType } from "../Type/NumberType.js";
import { ObjectType } from "../Type/ObjectType.js";
import { StringType } from "../Type/StringType.js";
import { UnionType } from "../Type/UnionType.js";
import { derefType } from "../Utils/derefType.js";
import { getTypeKeys } from "../Utils/typeKeys.js";
export class TypeOperatorNodeParser {
    childNodeParser;
    constructor(childNodeParser) {
        this.childNodeParser = childNodeParser;
    }
    supportsNode(node) {
        return node.kind === ts.SyntaxKind.TypeOperator;
    }
    createType(node, context) {
        const type = this.childNodeParser.createType(node.type, context);
        const derefed = derefType(type);
        if (node.operator === ts.SyntaxKind.ReadonlyKeyword && derefed) {
            return derefed;
        }
        if (derefed instanceof ArrayType) {
            return new NumberType();
        }
        const keys = getTypeKeys(type);
        if (derefed instanceof ObjectType && derefed.getAdditionalProperties()) {
            return new UnionType([...keys, new StringType()]);
        }
        if (keys.length === 1) {
            return keys[0];
        }
        return new UnionType(keys);
    }
}
//# sourceMappingURL=TypeOperatorNodeParser.js.map